@page "/Landscape"
@inherits PmCompontentBase

<div class="d-flex full-height">

    <MNavigationDrawer Permanent Class="rounded-4 full-height" Width="242">
        <div class="full-height d-flex flex-column" style="min-width:242px; align-items:center; overflow: auto;">
            <MList Width="194">
                <MListItemGroup Class="rounded-2"
                                @bind-Value="_selectedEnvId"
                                Mandatory
                                Color="#A3AED0">
                    @foreach (var env in _environments)
                    {
                        <MListItem Style="height: 40px !important;" Class="rounded-2 env-list" Value="env.Id" Dense OnClick="@(()=>GetClustersByEnvIdAsync(env.Id))">
                            <ItemContent>
                                <MListItemIcon Class="d-flex align-center mr-0">
                                    <MIcon Color="@env.Color" Size="12">mdi-circle</MIcon>
                                </MListItemIcon>
                                <MListItemContent>
                                    <MListItemTitle>@env.Name</MListItemTitle>
                                </MListItemContent>
                                @if (context.Active)
                                {
                                    <MListItemIcon Class="d-flex align-center">
                                        <MButton StopPropagation Icon OnClick="()=>UpdateEnvAsync(env.Id)">
                                            <MIcon Size="18" Class="pencil">mdi-pencil</MIcon>
                                        </MButton>
                                    </MListItemIcon>
                                }
                            </ItemContent>
                        </MListItem>
                    }
                </MListItemGroup>
            </MList>
        </div>
        <MButton OnClick="()=>ShowEnvModalAsync()" Width="194" Tile Text Style="height: 54px; border-radius: 8px; border: 2px dashed #E9EDF7; position: fixed; left:24px; right:24px; bottom: 24px;">
            <MIcon Left>mdi-plus</MIcon> <span class="emphasis--text">@T("Add Environment")</span>
        </MButton>
    </MNavigationDrawer>

    <div class="pl-6 d-flex flex-column" style="width: calc(100% - 242px); overflow: hidden;">
        <MRow NoGutters Align="AlignTypes.Center" Class="env-toolbar rounded-5" Style="height:102px;background:#fff;padding:0 12px;">
            <MCard Style="padding-right: 150px;">

                <MTabs @bind-Value="_selectEnvClusterId" Class="cluster-tabs mt-2" BackgroundColor="#fff" ShowArrows="@(true)" ActiveClass="cluster-tab-active" HideSlider>
                    @foreach (var cluster in _clusters)
                    {
                        StringNumber envClusterId = (StringNumber)cluster.EnvironmentClusterId;
                        <MTab Style="height:40px; max-width:150px;" Value="envClusterId" OnClick="()=>GetProjectByEnvClusterIdAsync(cluster.EnvironmentClusterId)">
                            <MTooltip Top>
                                <ActivatorContent>
                                    <div class="text-overflow" @attributes="@context.Attrs">@cluster.Name</div>
                                </ActivatorContent>
                                <ChildContent>
                                    <span>@cluster.Name</span>
                                </ChildContent>
                            </MTooltip>
                            @if (cluster.EnvironmentClusterId == _selectEnvClusterId.AsT1)
                            {
                                <MButton StopPropagation Icon OnClick="()=>UpdateClusterAsync(cluster.Id)">
                                    <MIcon Size="18">mdi-pencil</MIcon>
                                </MButton>
                            }
                        </MTab>
                    }
                </MTabs>
            </MCard>
            <MButton OnClick="()=>ShowClusterModalAsync()" Tile Text Style="position:fixed; right:48px; height: 54px; border-radius: 8px; border: 2px dashed #E9EDF7;">
                <MIcon Left>mdi-plus</MIcon><span class="emphasis--text">@T("Add Cluster")</span>
            </MButton>
        </MRow>
        <div class="rounded-5 mt-6 py-2 full-height" style="background:#fff;display:flex; flex-direction:column; justify-content:space-between; overflow:auto;">
            <div>
                <MExpansionPanels Flat Accordion>
                    @foreach (var project in _projects)
                    {
                        var apps = _apps.Where(app => app.ProjectId == project.Id && app.EnvironmentClusters.Select(envCluster => envCluster.Id).Contains(_selectEnvClusterId.AsT1)).ToList();
                        <MExpansionPanel Style="margin-bottom: 12px; border-radius: 20px;">
                            <MExpansionPanelHeader>
                                <span style="display:flex;align-items:center;margin-right:10px;">
                                    <div class="emphasis--text h6">
                                        @project.Name
                                        <span class="ml-2 regular3--text btn">|</span>
                                        <sapn class="ml-1 regular3--text btn">@T("AppCount"):@apps.Count</sapn>
                                        <div class="regular3--text btn d-flex" style="padding:0">
                                            @{
                                                string backgroundColor;
                                                switch (project.LabelName.ToLower())
                                                {
                                                    case "basic ability":
                                                        backgroundColor = "#37D7AD";
                                                        break;
                                                    case "ops ability":
                                                        backgroundColor = "#FFB547";
                                                        break;
                                                    case "data factory":
                                                        backgroundColor = "#5FB9FF";
                                                        break;
                                                    default:
                                                        backgroundColor = "";
                                                        break;
                                                }
                                            }
                                            <div class="d-flex justify-center mr-2" style="border-radius:6px; color:#fff; background-color:@backgroundColor; padding:0 4px;">
                                                @project.LabelName
                                            </div>
                                            <span class="body2">@project.Identity</span>
                                        </div>
                                    </div>
                                    <MSpacer />
                                    <div style="display:flex;align-items:center;">
                                        <MButton Icon StopPropagation Class="mr-1" OnClick="()=>UpdateProjectAsync(project.Id)"><MIcon Size="20" Color="#485585">mdi-pencil</MIcon></MButton>
                                        <MDivider Vertical Style="height: 20px;margin: 7px 8px 0 8px;" />
                                    </div>
                                </span>
                            </MExpansionPanelHeader>
                            <MExpansionPanelContent>
                                <MRow>
                                    @foreach (var app in apps)
                                    {
                                        @if (app.ProjectId == project.Id)
                                        {
                                            <MCol Lg="4" Md="6" Sm="12">
                                                <AppCard App="app" EnvironmentClusters="app.EnvironmentClusters" OnClick="()=>UpdateAppAsync(app.Id,project.Id)"></AppCard>
                                            </MCol>
                                        }
                                    }
                                    <MCol Lg="4" Md="6" Sm="12">
                                        <MRow NoGutters>
                                            <MCol Class="pr-2">
                                                <MButton Height="162" OnClick="()=>ShowAppModalAsync(project.Id)" Tile Text Style="width: 100%; display: flex; justify-content: center; align-items: center; border-radius: 8px; border: 2px dashed #E9EDF7;">
                                                    <MIcon Left>mdi-plus</MIcon><span class="emphasis--text">@T("Add App")</span>
                                                </MButton>
                                            </MCol>
                                            <MCol>
                                                <MButton Height="162" OnClick="()=>ShowRelationAppModalAsync(project.Id)" Tile Text Style="width: 100%; display: flex; justify-content: center; align-items: center; border-radius: 8px; border: 2px dashed #E9EDF7;">
                                                    <MIcon Left>mdi-plus</MIcon><span class="emphasis--text">@T("Select an existing app")</span>
                                                </MButton>
                                            </MCol>
                                        </MRow>
                                    </MCol>
                                </MRow>
                                <div class="d-flex justify-space-between mt-3">
                                    <div>
                                        <img style="height:24px;width:24px" src="/img/avatar/9.svg">
                                    </div>
                                    <div class="regular3--text btn">编辑于一小时前</div>
                                </div>
                            </MExpansionPanelContent>
                        </MExpansionPanel>
                    }
                </MExpansionPanels>
            </div>
            <MButton Height="54" OnClick="()=>ShowProjectModalAsync()" Tile Text Style="margin:24px 24px 16px 24px !important; display: flex; justify-content: center; align-items: center; border-radius: 8px; border: 2px dashed #E9EDF7;">
                <MIcon Left>mdi-plus</MIcon><span class="emphasis--text">@T("Add Project")</span>
            </MButton>
        </div>
    </div>

</div>

<SheetDialog ValueChanged="EnvModalValueChanged" Value="_envFormModel.Visible" Title="@(_clusterFormModel.HasValue ?$"{T("Edit Cluster")}":$"{T("Add Cluster")}")" Icon="mdi-circle" IconColor="success">
    <MForm Class="full-height" Context="formContext" EnableValidation Model="_envFormModel.Data">
        <div class="d-flex flex-column" style="width:100%; height:100%; padding: 48px 228px; overflow: hidden;">
            <div class="full-height">
                <MRow NoGutters Justify="JustifyTypes.SpaceBetween" Align="AlignTypes.Center">
                    <MCol Cols="9">
                        <DefaultTextField TextColor="@_envFormModel.Data.Color" Class="pr-6" Outlined Label="@T("Environment name")" @bind-Value="_envFormModel.Data.Name"></DefaultTextField>
                    </MCol>
                    <MCol Cols="3" Align="AlignTypes.Start">
                        <ColorGroup @bind-Value="_envFormModel.Data.Color" Style="margin:24px 0;" Colors="_colors"></ColorGroup>
                    </MCol>
                </MRow>
                <MAutocomplete Class="mt-3" @bind-Value="_envFormModel.Data.ClusterIds"
                               Items="_allClusters"
                               ItemText="r=>r.Name"
                               ItemValue="r=>r.Id"
                               Outlined
                               Label="@T("Relation cluster")"
                               Multiple>
                    <SelectionContent Context="_context">
                        <MChip Class="text-btn" Small TextColor="sample-green" Color="sample-green-lighten-5">
                            @_context.Item.Name
                        </MChip>
                    </SelectionContent>
                </MAutocomplete>
                <MTextarea Class="mt-6" Outlined Label="@T("Environment description")" @bind-Value="_envFormModel.Data.Description"></MTextarea>
                @if (_envFormModel.HasValue)
                {
                    <MRow Justify="JustifyTypes.SpaceBetween" Class="pt-3 regular--text" Style="line-height:normal !important;">
                        <MCol Cols=6>@T("Creator"): @_envDetail.Creator</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_envDetail.CreationTime.ToString(T("$DateTimeFormat"))</MCol>
                        <MCol Cols=6>@T("Modifier"): @_envDetail.Modifier</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_envDetail.ModificationTime.ToString(T("$DateTimeFormat"))</MCol>
                        <MCol Cols=6>@T("ClusterCount")：@_envFormModel.Data.ClusterIds?.Count</MCol>
                    </MRow>
                }
            </div>
            <div class="d-flex align-end" style="width:100%;">
                @if (_envFormModel.HasValue)
                {
                    <MButton Height="40" OnClick="RemoveEnvAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
                }
                <MSpacer></MSpacer>
                <MButton Height="40" Class="rounded-pill" Color="primary" Width="100" OnClick="()=>SubmitEnvAsync(formContext)">@(_envFormModel.HasValue ? T("Save") : T("Submit"))</MButton>
                </div>
            </div>
        </MForm>
    </SheetDialog>

    <SheetDialog ValueChanged="ClusterModalValueChanged" Value="_clusterFormModel.Visible" Title="@(_envFormModel.HasValue ? $"{T("Edit Environment")}":$"{T("Add Environment")}")" Icon="mdi-circle" IconColor="success">
        <MForm Class="full-height" Context="formContext" EnableValidation Model="_clusterFormModel.Data">
            <div class="d-flex flex-column" style="width:100%; height:100%; padding: 48px 228px; overflow: hidden;">
                <div class="full-height">
                    <DefaultTextField Outlined Label="@T("Cluster name")" @bind-Value="_clusterFormModel.Data.Name"></DefaultTextField>
                    <MAutocomplete Class="mt-6" @bind-Value="_clusterFormModel.Data.EnvironmentIds"
                               Items="_allEnvs"
                               ItemText="r=>r.Name"
                               ItemValue="r=>r.Id"
                               Outlined
                               Label="@T("Relation environment")"
                               Multiple>
                        <SelectionContent Context="context">
                            <MChip Class="text-btn" Small TextColor=@context.Item.Color Color="sample-green-lighten-5">
                                @context.Item.Name
                            </MChip>
                        </SelectionContent>
                        <ItemContent>
                            <MListItemContent Class="@($"{context.Item.Color}--text")">@context.Item.Name</MListItemContent>
                        </ItemContent>
                    </MAutocomplete>
                    <MTextarea Class="mt-6" Outlined Label="@T("Cluster description")" @bind-Value="_clusterFormModel.Data.Description"></MTextarea>
                    @if (_clusterFormModel.HasValue)
                {
                    <MRow Class="pt-3" Justify="JustifyTypes.SpaceBetween" Style="line-height:normal !important;">
                        <MCol Cols=6>@T("Creator"): @_clusterDetail.Creator</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_clusterDetail.CreationTime.ToString(T("$DateTimeFormat"))</MCol>
                        <MCol Cols=6>@T("Modifier"): @_clusterDetail.Modifier</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_clusterDetail.ModificationTime.ToString(T("$DateTimeFormat"))</MCol>
                        <MCol Cols=6>@T("ProjectCount")：@_projects.Count</MCol>
                    </MRow>
                }
            </div>
            <div class="d-flex align-end" style="width:100%;">
                @if (_clusterFormModel.HasValue)
                {
                    <MButton Height="40" OnClick="RemoveClusterAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
                }
                <MSpacer></MSpacer>
                <MButton Height="40" Class="rounded-pill" Color="primary" Width="100" OnClick="()=>SubmitClusterAsync(formContext)">@(_clusterFormModel.HasValue ? T("Save") : T("Submit"))</MButton>
                </div>
            </div>
        </MForm>
    </SheetDialog>

    <SheetDialog ValueChanged="ProjectModalValueChanged" Value="_projectFormModel.Visible" Title="@(_projectFormModel.HasValue ?$"{T("Edit Project")}":$"{T("Add Project")}")" Icon="mdi-circle" IconColor="success">
        <MForm Class="full-height" Context="formContext" EnableValidation Model="_projectFormModel.Data">
            <div class="d-flex flex-column" style="width:100%; height:100%; padding: 48px 228px; overflow: hidden;">
                <div class="full-height">
                    <DefaultTextField Class="mt-6" Outlined Label="@T("Project name")" @bind-Value="_projectFormModel.Data.Name"></DefaultTextField>
                    <MAutocomplete @bind-Value="_friends"
                               Items="_people"
                               Chips
                               Class="mt-6"
                               SmallChips
                               Outlined
                               Color="blue-grey lighten-2"
                               Label="@T("Project`s team")"
                               ItemText="r=>r.Name"
                               ItemValue="r=>r.Name">
                        <SelectionContent Context="data">
                            <MChip Small Close
                               OnCloseClick="()=>Remove()">
                                <MAvatar Left>
                                    <MImage Src="@data.Item.Avatar"></MImage>
                                </MAvatar>
                                @data.Item.Name
                            </MChip>
                        </SelectionContent>
                        <ItemContent Context="data">
                            @if (data.Item is not object)
                        {
                            <MListItemContent>@data.Item</MListItemContent>
                        }
                        else
                        {
                            <MListItemAvatar>
                                <img src="@data.Item.Avatar">
                            </MListItemAvatar>
                            <MListItemContent>
                                <MListItemTitle>
                                    @((MarkupString)data.Item.Name)
                                </MListItemTitle>
                                <MListItemSubtitle>
                                    @((MarkupString)data.Item.Group)
                                </MListItemSubtitle>
                            </MListItemContent>
                        }
                    </ItemContent>
                </MAutocomplete>
                <DefaultTextField Class="mt-6" Disabled="@(_projectFormModel.HasValue)" Outlined Label="ID" @bind-Value="_projectFormModel.Data.Identity"></DefaultTextField>
                <MSelect @bind-Value="_projectFormModel.Data.LabelId"
                         Disabled="@(_projectFormModel.HasValue)"
                         Items="_projectTypes"
                         ItemText="r=>r.Name"
                         ItemValue="r=>r.Id"
                         Outlined
                         Class="mt-6"
                         Label="@T("Project type")">
                </MSelect>
                <MAutocomplete @bind-Value="_projectFormModel.Data.EnvironmentClusterIds"
                               Items="allEnvClusters"
                               Class="mt-6"
                               ItemText="r=>r.EnvironmentClusterName"
                               ItemValue="r=>r.Id"
                               Outlined
                               Label="@T("Environment/Cluster")"
                               Multiple>
                    <SelectionContent Context="context">
                        <EnvClusterChip EnvironmentName="@context.Item.EnvironmentName" EnvironmentColor="@context.Item.EnvironmentColor" ClusterName="@context.Item.ClusterName" />
                    </SelectionContent>
                    <ItemContent>
                        <MListItemContent>
                            <div class="d-flex align-center">
                                <div class="@($"{context.Item.EnvironmentColor}--text")">@context.Item.EnvironmentName</div>/<div>@context.Item.ClusterName</div>
                            </div>
                        </MListItemContent>
                    </ItemContent>
                </MAutocomplete>
                <MTextarea Class="mt-6" Outlined Label="@T("Project description")" @bind-Value="_projectFormModel.Data.Description"></MTextarea>
                @if (_projectFormModel.HasValue)
                {
                    <MRow Class="pt-3" Justify="JustifyTypes.SpaceBetween" Style="line-height:normal !important;">
                        <MCol Cols=6>@T("Creator"): @_projectDetail.Creator</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_projectDetail.CreationTime.ToString(T("$DateTimeFormat"))</MCol>
                        <MCol Cols=6>@T("Modifier"): @_projectDetail.Modifier</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_projectDetail.ModificationTime.ToString(T("$DateTimeFormat"))</MCol>
                    </MRow>
                }
            </div>
            <div class="d-flex align-end" style="width:100%;">
                @if (_projectFormModel.HasValue)
                {
                    <MButton Height="40" OnClick="RemoveProjectAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
                }
                <MSpacer></MSpacer>
                <MButton Height="40" Class="rounded-pill" Color="primary" Width="100" OnClick="()=>SubmitProjectAsync(formContext)">@(_projectFormModel.HasValue ? T("Save") : T("Submit"))</MButton>
                </div>
            </div>
        </MForm>
    </SheetDialog>

    <SheetDialog ValueChanged="AppModalValueChanged" Value="_appFormModel.Visible" Title="@(_appFormModel.HasValue ? T("Edit App"):T("Add App"))" Icon="mdi-circle" IconColor="success">
        <MForm Class="full-height" Context="formContext" EnableValidation Model="_appFormModel.Data">
            <div class="d-flex flex-column" style="width:100%; height:100%; padding: 48px 228px; overflow: hidden;">
                <div class="full-height">
                    <DefaultTextField Class="mt-6" Outlined Label="@T("App name")" @bind-Value="_appFormModel.Data.Name"></DefaultTextField>
                    <MSelect @bind-Value="_appFormModel.Data.Type"
                         Disabled="@(_appFormModel.HasValue)"
                         Class="mt-6"
                         Items="Enum<AppTypes>.GetEnumObjectList<AppTypes>()"
                         ItemText="r=>r.Name"
                         ItemValue="r=>r.Value"
                         Outlined
                         Label="@T("App type")">
                    </MSelect>
                    <FadeTransition>
                        <ShowTransitionElement Value="@(_appFormModel.Data.Type == AppTypes.Service)" Class="text-center">
                            <MSelect Class="mt-6"
                                 @bind-Value="_appFormModel.Data.ServiceType"
                                 Disabled="@(_appFormModel.HasValue)"
                                 Items="Enum<ServiceTypes>.GetEnumObjectList<ServiceTypes>()"
                                 ItemText="r=>r.Name"
                                 ItemValue="r=>r.Value"
                                 Outlined
                                 Label="@T("Service type")">
                            </MSelect>
                        </ShowTransitionElement>
                    </FadeTransition>
                    <DefaultTextField Class="mt-6" Outlined Label="Url" @bind-Value="_appFormModel.Data.Url"></DefaultTextField>
                    <FadeTransition>
                        <ShowTransitionElement Value="@(_appFormModel.Data.Type == AppTypes.Service)" Class="text-center">
                            <DefaultTextField Class="mt-6" Outlined Label="Swagger Url" @bind-Value="_appFormModel.Data.SwaggerUrl"></DefaultTextField>
                        </ShowTransitionElement>
                    </FadeTransition>
                    <DefaultTextField Class="mt-6" Disabled="@(_appFormModel.HasValue)" Outlined Label="ID" Placeholder="@T("If dapr is selected, the app identity format is recommended: app-id,divided by -")" @bind-Value="_appFormModel.Data.Identity"></DefaultTextField>
                    <MAutocomplete Class="mt-6" @bind-Value="_appFormModel.Data.EnvironmentClusterIds"
                               Items="_projectEnvClusters"
                               ItemText="r=>r.EnvironmentClusterName"
                               ItemDisabled="@(r=>r.Id==_selectEnvClusterId.AsT1)"
                               ItemValue="r=>r.Id"
                               Outlined
                               Label="@T("Environment/Cluster")"
                               Multiple>
                        <SelectionContent Context="context">
                            <EnvClusterChip EnvironmentName="@context.Item.EnvironmentName" EnvironmentColor="@context.Item.EnvironmentColor" ClusterName="@context.Item.ClusterName" />
                        </SelectionContent>
                        <ItemContent>
                            <MListItemContent>
                                <div class="d-flex align-center">
                                    <div class="@($"{context.Item.EnvironmentColor}--text")">@context.Item.EnvironmentName</div>/<div>@context.Item.ClusterName</div>
                                </div>
                            </MListItemContent>
                        </ItemContent>
                    </MAutocomplete>
                    <MTextarea Class="mt-6" Outlined Label="@T("App description")" @bind-Value="_appFormModel.Data.Description"></MTextarea>
                    @if (_appFormModel.HasValue)
                {
                    <MRow Class="pt-3" Justify="JustifyTypes.SpaceBetween" Style="line-height:normal !important;">
                        <MCol Cols=6>@T("Creator"): @_appDetail.Creator</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_appDetail.CreationTime.ToString(T("$DateTimeFormat"))</MCol>
                        <MCol Cols=6>@T("Modifier"): @_appDetail.Modifier</MCol>
                        <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_appDetail.ModificationTime.ToString(T("$DateTimeFormat"))</MCol>
                    </MRow>
                }
            </div>
            <div class="d-flex align-end" style="width:100%;">
                @if (_appFormModel.HasValue)
                {
                    <MButton Height="40" OnClick="RemoveAppAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
                }
                <MSpacer></MSpacer>
                <MButton Height="40" Class="rounded-pill" Color="primary" Width="100" OnClick="()=>SubmitAppAsync(formContext)">@(_appFormModel.HasValue ? T("Save") : T("Submit"))</MButton>
                </div>
            </div>
        </MForm>
    </SheetDialog>

    <SheetDialog ValueChanged="RelationAppValueChanged" Value="_relationAppVisible" Title="@T("Add App")" Icon="mdi-circle" IconColor="success">
        <div class="d-flex flex-column" style="width:100%; height:100%; padding: 48px 228px; overflow: hidden;">
            <div class="full-height">
                <MAutocomplete TItem="AppDto"
                           TValue="int"
                           TItemValue="int"
                           Items="_allApps"
                           ItemText="r=>r.Name"
                           ItemValue="r=>r.Id"
                           Class="mt-6"
                           Outlined
                           Value="_addRelationAppModel.AppId"
                           ValueChanged="RelationAppSelectChange"
                           Label="@T("Select an existing app")">
                    <SelectionContent Context="_context">
                        <MChip Class="text-btn" Small TextColor="sample-green" Color="sample-green-lighten-5">
                            @_context.Item.Name
                        </MChip>
                    </SelectionContent>
                </MAutocomplete>
                <MAutocomplete @bind-Value="_addRelationAppModel.EnvironmentClusterIds"
                           Class="mt-6"
                           Items="_projectEnvClusters"
                           ItemText="r=>r.EnvironmentClusterName"
                           ItemDisabled="@(r=>_disableRelationAppEnvCluster.Contains(r.Id))"
                           ItemValue="r=>r.Id"
                           Outlined
                           Label="@T("Environment/Cluster")"
                           Multiple>
                    <SelectionContent Context="_context">
                        <EnvClusterChip EnvironmentName="@_context.Item.EnvironmentName" ClusterName="@_context.Item.ClusterName" />
                    </SelectionContent>
                </MAutocomplete>
                <MSelect @bind-Value="_selectAppType"
                     Disabled
                     Class="mt-6"
                     Items="Enum<AppTypes>.GetEnumObjectList()"
                     ItemText="r=>r.Name"
                     ItemValue="r=>r.Value"
                     Outlined
                     Label="@T("App type")">
                </MSelect>
                <FadeTransition>
                    <ShowTransitionElement Value="@(_selectAppType == (int)AppTypes.Service)" Class="text-center">
                        <MSelect @bind-Value="_selectAppServiceType"
                             Disabled
                             Items="Enum<ServiceTypes>.GetEnumObjectList()"
                             ItemText="r=>r.Name"
                             ItemValue="r=>r.Value"
                             Outlined
                             Label="@T("Service type")">
                        </MSelect>
                    </ShowTransitionElement>
                </FadeTransition>
                <DefaultTextField Class="mt-6" Disabled Outlined Label="Url" @bind-Value="_appDetail.Url"></DefaultTextField>
                <FadeTransition>
                    <ShowTransitionElement Value="@(_selectAppType == (int)AppTypes.Service)" Class="text-center">
                        <DefaultTextField Class="mt-6" Disabled Outlined Label="Swagger Url" @bind-Value="_appDetail.SwaggerUrl"></DefaultTextField>
                    </ShowTransitionElement>
                </FadeTransition>
                <DefaultTextField Class="mt-6" Disabled Outlined Label="ID" Placeholder="@T("If dapr is selected, the app identity format is recommended: app-id,divided by -")" @bind-Value="_appDetail.Identity"></DefaultTextField>
                <MTextarea Class="mt-6" Disabled Outlined Label="@T("Cluster description")" @bind-Value="_appDetail.Description"></MTextarea>
            </div>
            <div class="d-flex align-end" style="width:100%;">
                <MSpacer></MSpacer>
                <MButton Height="40" Class="rounded-pill" Color="primary" Width="100" OnClick="SubmitRelationAppAsync">@T("Submit")</MButton>
            </div>
        </div>
    </SheetDialog>

    @code {
    private string _friends = "Sandra Adams";

    public class Person
    {
        public string Header { get; set; }

        public string Name { get; set; }

        public string Group { get; set; }

        public string Avatar { get; set; }

        public bool Divider { get; set; }
    }

    private List<Person> _people = new List<Person>
    {
        new Person
        {
            Header="Group 1",
            Name="Group 1"
        },
        new Person
        {
            Name="Sandra Adams",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/1.png"
        },
        new Person
        {
            Name="Ali Connors",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/2.png"
        },
        new Person
        {
            Name="Trevor Hansen",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/3.png"
        },
        new Person
        {
            Name="Tucker Smith",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/2.png"
        },
        new Person
        {
            Divider=true,
            Name="Group 1"
        },
        new Person
        {
            Header="Group 2",
            Name="Group 1"
        },
        new Person
        {
            Name="Britta Holt",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/4.png"
        },
        new Person
        {
            Name="Jane Smith ",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/5.png"
        },
        new Person
        {
            Name="John Smith",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/1.png"
        },
        new Person
        {
            Name="Sandra Williams",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/3.png"
        }
    };

    public void Remove()
    {
        _friends = "";
    }
}
