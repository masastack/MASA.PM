@page "/Landscape"
@inherits ProCompontentBase

<div class="d-flex">

    <MNavigationDrawer Permanent Class="rounded-4" Width="242" Style="height:calc(100vh - 110px );">
        <div style="min-width:242px; display:flex; flex-direction:column; align-items:center; overflow: auto; height:calc(100vh - 206px );">
            <MList Width="194">
                <MListItemGroup Class="rounded-2"
                                @bind-Value="_selectedEnvId"
                                Mandatory
                                Color="#A3AED0">
                    @foreach (var env in _environments)
                    {
                        <MListItem Class="rounded-2 env-list" Value="env.Id" Dense OnClick="@(()=>GetClustersByEnvIdAsync(env.Id))">
                            <ItemContent>
                                <MListItemContent>
                                    <MListItemTitle>@env.Name</MListItemTitle>
                                </MListItemContent>
                                @if (context.Active)
                                {
                                    <MListItemIcon Class="d-flex align-center pt-1">
                                        <MButton StopPropagation Icon OnClick="()=>UpdateEnvAsync(env.Id)">
                                            <MIcon>mdi-pencil</MIcon>
                                        </MButton>
                                    </MListItemIcon>
                                }
                            </ItemContent>
                        </MListItem>
                    }
                </MListItemGroup>
            </MList>
        </div>
        <MButton OnClick="()=>ShowEnvModalAsync()" Width="194" Tile Text Style="height: 54px; border: dashed 1px rgba(0, 0, 0, 0.12); position: fixed; left:24px; right:24px; bottom: 24px;">
            <MIcon Left>mdi-plus</MIcon>@T("Add Environment")
        </MButton>
    </MNavigationDrawer>

    <div class="pl-6" style="width: calc(100% - 242px); overflow: hidden; display:block;">
        <MRow NoGutters Align="AlignTypes.Center" Class="env-toolbar rounded-5" Style="height:102px;background:#fff;padding:0 12px;">
            <MCard Style="padding-right: 150px;">
                <MTabs @bind-Value="_selectEnvClusterId" Class="cluster-tabs" BackgroundColor="#fff" ShowArrows="@(true)" ActiveClass="cluster-tab-active" HideSlider>
                    @foreach (var cluster in _clusters)
                    {
                        StringNumber envClusterId = (StringNumber)cluster.EnvironmentClusterId;
                        <MTab Style="max-width:150px;" Value="envClusterId" OnClick="()=>GetProjectByEnvClusterIdAsync(cluster.EnvironmentClusterId)">
                            <div class="text-overflow">@cluster.Name</div>
                            @if (cluster.EnvironmentClusterId == _selectEnvClusterId.AsT1)
                            {
                                <MButton StopPropagation Icon OnClick="()=>UpdateClusterAsync(cluster.Id)">
                                    <MIcon>mdi-pencil</MIcon>
                                </MButton>
                            }
                        </MTab>
                    }
                </MTabs>
            </MCard>
            <MButton OnClick="()=>ShowClusterModalAsync()" Tile Text Style="position:fixed; right:48px; height: 54px; border: dashed 1px rgba(0, 0, 0, 0.12);">
                <MIcon Left>mdi-plus</MIcon>@T("Add Cluster")
            </MButton>
        </MRow>
        <div class="rounded-5 mt-6 py-2" style="height:calc(100vh - 234px );background:#fff;display:flex; flex-direction:column; justify-content:space-between; overflow:auto;">
            <div>
                <MExpansionPanels Flat Accordion>
                    @foreach (var project in _projects)
                    {
                        var apps = _apps.Where(app => app.ProjectId == project.Id && app.EnvironmentClusters.Select(ec => ec.EnvironmentCluster.Id).Contains(_selectEnvClusterId.AsT1)).ToList();
                        <MExpansionPanel Style="margin-bottom: 12px; border-radius: 20px;">
                            <MExpansionPanelHeader>
                                <span style="display:flex;align-items:center;margin-right:10px;">
                                    <div class="text-h6">
                                        @project.Name
                                        <span class="ml-2 text-caption">|</span>
                                        <sapn class="ml-1 text-caption">@T("AppCount"):@apps.Count</sapn>
                                        <div class="text-caption" style="padding:0">@project.Identity</div>
                                    </div>
                                    <MSpacer />
                                    <div style="display:flex;align-items:center;">
                                        <MButton Icon StopPropagation Class="mr-1" OnClick="()=>UpdateProjectAsync(project.Id)"><MIcon>mdi-pencil</MIcon></MButton>
                                        <MDivider Vertical Style="height: 20px;margin: 7px 8px 0 8px;" />
                                    </div>
                                </span>
                            </MExpansionPanelHeader>
                            <MExpansionPanelContent>
                                <MRow>
                                    @foreach (var app in apps)
                                    {
                                        @if (app.ProjectId == project.Id)
                                        {
                                            <MCol Lg="4" Md="6" Sm="12">
                                                <AppCard App="app" EnvironmentClusters="app.EnvironmentClusters" OnClick="()=>UpdateAppAsync(app.Id,project.Id)"></AppCard>
                                            </MCol>
                                        }
                                    }
                                    <MCol Lg="4" Md="6" Sm="12">
                                        <MRow NoGutters>
                                            <MCol Class="pr-2">
                                                <MCard Outlined Style="border-radius:10px !important; display:flex; align-items: center; justify-content: center; border-style: dashed;" MinHeight="162">
                                                    <MButton Ripple=false Plain OnClick="()=>ShowAppModalAsync(project.Id)"><MIcon Left>mdi-plus</MIcon>@T("Add App")</MButton>
                                                </MCard>
                                            </MCol>
                                            <MCol>
                                                <MCard Outlined Style="border-radius:10px !important; display:flex; align-items: center; justify-content: center; border-style: dashed;" MinHeight="162">
                                                    <MButton Ripple=false Plain OnClick="()=>ShowRelationAppModalAsync(project.Id)"><MIcon Left>mdi-plus</MIcon>@T("Select an existing app")</MButton>
                                                </MCard>
                                            </MCol>
                                        </MRow>
                                    </MCol>
                                </MRow>
                                <div class="d-flex justify-space-between mt-3">
                                    <div>
                                        <img style="height:24px;width:24px" src="/img/avatar/9.svg">
                                    </div>
                                    <div class="text-caption">编辑于一小时前</div>
                                </div>
                            </MExpansionPanelContent>
                        </MExpansionPanel>
                    }
                </MExpansionPanels>
            </div>
            <MCard Outlined Class="mb-4 mx-6" Style="padding:0 6px; border-radius:0 !important; display: flex; justify-content: center; align-items: center; border-style: dashed;" MinHeight=54>
                <MButton Ripple=false Plain OnClick="()=>ShowProjectModalAsync()">
                    <MIcon Left>mdi-plus</MIcon>@T("Add Project")
                </MButton>
            </MCard>
        </div>
    </div>

</div>

<FormModal Visible="_envFormModel.Visible"
           Title="@(_envFormModel.HasValue ? $"{T("Edit Environment")}":$"{T("Add Environment")}")"
           Width="684"
           Model="_envFormModel.Data"
           OnCancel="_envFormModel.Hide">
    <ChildContent>
        <MTextField Outlined Label="@T("Environment name")" @bind-Value="_envFormModel.Data.Name"></MTextField>
        <MAutocomplete @bind-Value="_envFormModel.Data.ClusterIds"
                       Items="_allClusters"
                       ItemText="r=>r.Name"
                       ItemValue="r=>r.Id"
                       Outlined
                       Label="@T("Relation cluster")"
                       Multiple>
            <SelectionContent Context="_context">
                <MChip Class="text-btn" Small TextColor="sample-green" Color="sample-green-lighten-5">
                    @_context.Item.Name
                </MChip>
            </SelectionContent>
        </MAutocomplete>
        <MTextarea Outlined Label="@T("Environment description")" @bind-Value="_envFormModel.Data.Description"></MTextarea>
        @if (_envFormModel.HasValue)
        {
            <MRow Justify="JustifyTypes.SpaceBetween" Style="line-height:normal !important;">
                <MCol Cols=6>@T("Creator"): @_envDetail.Creator</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_envDetail.CreationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
                <MCol Cols=6>@T("Modifier"): @_envDetail.Modifier</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_envDetail.ModificationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
                <MCol Cols=6>@T("ClusterCount")：@_envFormModel.Data.ClusterIds.Count</MCol>
            </MRow>
        }
    </ChildContent>
    <ActionsContent>
        <div style="width:100%; margin:10px;">
            @if (_envFormModel.HasValue)
            {
                <MButton OnClick="RemoveEnvAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
            }
            <MButton OnClick="SubmitEnvAsync" Width=100 Class="rounded-pill" Color="primary" Style="float:right;">@(_envFormModel.HasValue? T("Save") : T("Submit"))</MButton>
        </div>
    </ActionsContent>
</FormModal>

<FormModal Visible="_clusterFormModel.Visible"
           Title="@(_clusterFormModel.HasValue ?$"{T("Edit Cluster")}":$"{T("Add Cluster")}")"
           Width="684"
           Model="_clusterFormModel.Data"
           OnCancel="_clusterFormModel.Hide">
    <ChildContent>
        <MTextField Outlined Label="@T("Cluster name")" @bind-Value="_clusterFormModel.Data.Name"></MTextField>
        <MAutocomplete @bind-Value="_clusterFormModel.Data.EnvironmentIds"
                       Items="_allEnvs"
                       ItemText="r=>r.Name"
                       ItemValue="r=>r.Id"
                       Outlined
                       Label="@T("Relation environment")"
                       Multiple>
            <SelectionContent Context="_context">
                <MChip Class="text-btn" Small TextColor="sample-green" Color="sample-green-lighten-5">
                    @_context.Item.Name
                </MChip>
            </SelectionContent>
        </MAutocomplete>
        <MTextarea Outlined Label="@T("Cluster description")" @bind-Value="_clusterFormModel.Data.Description"></MTextarea>
        @if (_clusterFormModel.HasValue)
        {
            <MRow Justify="JustifyTypes.SpaceBetween" Style="line-height:normal !important;">
                <MCol Cols=6>@T("Creator"): @_clusterDetail.Creator</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_clusterDetail.CreationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
                <MCol Cols=6>@T("Modifier"): @_clusterDetail.Modifier</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_clusterDetail.ModificationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
                <MCol Cols=6>@T("ProjectCount")：@_projects.Count</MCol>
            </MRow>
        }
    </ChildContent>
    <ActionsContent>
        <div style="width:100%; margin:10px;">
            @if (_clusterFormModel.HasValue)
            {
                <MButton OnClick="RemoveClusterAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
            }
            <MButton OnClick="SubmitClusterAsync" Width=100 Class="rounded-pill" Color="primary" Style="float:right;">@(_envFormModel.HasValue? T("Save") : T("Submit"))</MButton>
        </div>
    </ActionsContent>
</FormModal>

<FormModal Visible="_projectFormModel.Visible"
           Title="@(_projectFormModel.HasValue ?$"{T("Edit Project")}":$"{T("Add Project")}")"
           Width="684"
           Model="_projectFormModel.Data"
           OnCancel="ProjectHide">
    <ChildContent>
        <MTextField Outlined Label="@T("Project name")" @bind-Value="_projectFormModel.Data.Name"></MTextField>
        <MAutocomplete @bind-Value="_friends"
                       Items="_people"
                       Chips
                       SmallChips
                       Outlined
                       Color="blue-grey lighten-2"
                       Label="@T("Project`s team")"
                       ItemText="r=>r.Name"
                       ItemValue="r=>r.Name">
            <SelectionContent Context="data">
                <MChip Small Close
                       OnCloseClick="()=>Remove()">
                    <MAvatar Left>
                        <MImage Src="@data.Item.Avatar"></MImage>
                    </MAvatar>
                    @data.Item.Name
                </MChip>
            </SelectionContent>
            <ItemContent Context="data">
                @if (data.Item is not object)
                {
                    <MListItemContent>@data.Item</MListItemContent>
                }
                else
                {
                    <MListItemAvatar>
                        <img src="@data.Item.Avatar">
                    </MListItemAvatar>
                    <MListItemContent>
                        <MListItemTitle>
                            @((MarkupString)data.Item.Name)
                        </MListItemTitle>
                        <MListItemSubtitle>
                            @((MarkupString)data.Item.Group)
                        </MListItemSubtitle>
                    </MListItemContent>
                }
            </ItemContent>
        </MAutocomplete>
        <MTextField Disabled="@(_projectFormModel.HasValue)" Outlined Label="ID" @bind-Value="_projectFormModel.Data.Identity"></MTextField>
        <MSelect @bind-Value="_projectFormModel.Data.LabelId"
                 Disabled="@(_projectFormModel.HasValue)"
                 Items="_projectTypes"
                 ItemText="r=>r.Name"
                 ItemValue="r=>r.Id"
                 Outlined
                 Label="@T("Project type")">
        </MSelect>
        <MAutocomplete @bind-Value="_projectFormModel.Data.EnvironmentClusterIds"
                       Items="allEnvClusters"
                       ItemText="r=>r.EnvironmentClusterName"
                       ItemValue="r=>r.Id"
                       Outlined
                       Label="@T("Environment/Cluster")"
                       Multiple>
            <SelectionContent Context="_context">
                <EnvClusterChip EnvironmentName="@_context.Item.EnvironmentName" ClusterName="@_context.Item.ClusterName" />
            </SelectionContent>
        </MAutocomplete>
        <MTextarea Outlined Label="@T("Project description")" @bind-Value="_projectFormModel.Data.Description"></MTextarea>
        @if (_projectFormModel.HasValue)
        {
            <MRow Justify="JustifyTypes.SpaceBetween" Style="line-height:normal !important;">
                <MCol Cols=6>@T("Creator"): @_projectDetail.Creator</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_projectDetail.CreationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
                <MCol Cols=6>@T("Modifier"): @_projectDetail.Modifier</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_projectDetail.ModificationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
            </MRow>
        }
    </ChildContent>
    <ActionsContent>
        <div style="width:100%; margin:10px;">
            @if (_projectFormModel.HasValue)
            {
                <MButton OnClick="RemoveProjectAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
            }
            <MButton OnClick="SubmitProjectAsync" Width=100 Class="rounded-pill" Color="primary" Style="float:right;">@(_envFormModel.HasValue? T("Save") : T("Submit"))</MButton>
        </div>
    </ActionsContent>
</FormModal>

<FormModal Visible="_appFormModel.Visible"
           Title="@(_appFormModel.HasValue ? T("Edit App"):T("Add App"))"
           Width="684"
           Model="_appFormModel.Data"
           OnCancel="AppHide">
    <ChildContent>
        <MTextField Outlined Label="@T("App name")" @bind-Value="_appFormModel.Data.Name"></MTextField>
        <MSelect @bind-Value="_selectAppType"
                 Disabled="@(_appFormModel.HasValue)"
                 Items="Enum<AppTypes>.GetEnumObjectList()"
                 ItemText="r=>r.Name"
                 ItemValue="r=>r.Value"
                 Outlined
                 Label="@T("App type")">
        </MSelect>
        <FadeTransition>
            <Element Show="@(_selectAppType == (int)AppTypes.Service)" Class="text-center">
                <MSelect @bind-Value="_selectAppServiceType"
                         Disabled="@(_appFormModel.HasValue)"
                         Items="Enum<ServiceTypes>.GetEnumObjectList()"
                         ItemText="r=>r.Name"
                         ItemValue="r=>r.Value"
                         Outlined
                         Label="@T("Service type")">
                </MSelect>
            </Element>
        </FadeTransition>
        <MTextField Outlined Label="Url" @bind-Value="_appFormModel.Data.Url"></MTextField>
        <FadeTransition>
            <Element Show="@(_selectAppType == (int)AppTypes.Service)" Class="text-center">
                <MTextField Outlined Label="Swagger Url" @bind-Value="_appFormModel.Data.SwaggerUrl"></MTextField>
            </Element>
        </FadeTransition>
        <MTextField Disabled="@(_appFormModel.HasValue)" Outlined Label="ID" Placeholder="@T("If dapr is selected, the app identity format is recommended: app-id,divided by -")" @bind-Value="_appFormModel.Data.Identity"></MTextField>
        <MAutocomplete @bind-Value="_appFormModel.Data.EnvironmentClusterIds"
                       Items="_projectEnvClusters"
                       ItemText="r=>r.EnvironmentClusterName"
                       ItemDisabled="@(r=>r.Id==_selectEnvClusterId.AsT1)"
                       ItemValue="r=>r.Id"
                       Outlined
                       Label="@T("Environment/Cluster")"
                       Multiple>
            <SelectionContent Context="_context">
                <EnvClusterChip EnvironmentName="@_context.Item.EnvironmentName" ClusterName="@_context.Item.ClusterName" />
            </SelectionContent>
        </MAutocomplete>
        <MTextarea Outlined Label="@T("App description")" @bind-Value="_appFormModel.Data.Description"></MTextarea>
        @if (_appFormModel.HasValue)
        {
            <MRow Justify="JustifyTypes.SpaceBetween" Style="line-height:normal !important;">
                <MCol Cols=6>@T("Creator"): @_appDetail.Creator</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("CreationTime"): @_appDetail.CreationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
                <MCol Cols=6>@T("Modifier"): @_appDetail.Modifier</MCol>
                <MCol Class="d-flex justify-end" Cols=6>@T("ModificationTime"): @_appDetail.ModificationTime.ToString("yyyy-MM-dd HH:mm:ss")</MCol>
            </MRow>
        }
    </ChildContent>
    <ActionsContent>
        <div style="width:100%; margin:10px;">
            @if (_appFormModel.HasValue)
            {
                <MButton OnClick="RemoveAppAsync" Width=100 Class="rounded-pill" Text Color="red" Style="float:left;">@T("Remove")</MButton>
            }
            <MButton OnClick="SubmitAppAsync" Width=100 Class="rounded-pill" Color="primary" Style="float:right;">@(_appFormModel.HasValue? T("Save") : T("Submit"))</MButton>
        </div>
    </ActionsContent>
</FormModal>

<FormModal Visible="_relationAppVisible"
           Title="@T("Add App")"
           Width="684"
           OnCancel="RelationAppHide">
    <ChildContent>
        <MAutocomplete TItem="AppDto"
                       TValue="int"
                       TItemValue="int"
                       Items="_allApps"
                       ItemText="r=>r.Name"
                       ItemValue="r=>r.Id"
                       Outlined
                       OnSelectedItemUpdate="RelationAppSelectChange"
                       Label="@T("Select an existing app")">
            <SelectionContent Context="_context">
                <MChip Class="text-btn" Small TextColor="sample-green" Color="sample-green-lighten-5">
                    @_context.Item.Name
                </MChip>
            </SelectionContent>
        </MAutocomplete>
        <MAutocomplete @bind-Value="_addRelationAppModel.EnvironmentClusterIds"
                       Items="_projectEnvClusters"
                       ItemText="r=>r.EnvironmentClusterName"
                       ItemDisabled="@(r=>_disableRelationAppEnvCluster.Contains(r.Id))"
                       ItemValue="r=>r.Id"
                       Outlined
                       Label="@T("Environment/Cluster")"
                       Multiple>
            <SelectionContent Context="_context">
                <EnvClusterChip EnvironmentName="@_context.Item.EnvironmentName" ClusterName="@_context.Item.ClusterName" />
            </SelectionContent>
        </MAutocomplete>
        <MSelect @bind-Value="_selectAppType"
                 Disabled
                 Items="Enum<AppTypes>.GetEnumObjectList()"
                 ItemText="r=>r.Name"
                 ItemValue="r=>r.Value"
                 Outlined
                 Label="@T("App type")">
        </MSelect>
        <FadeTransition>
            <Element Show="@(_selectAppType == (int)AppTypes.Service)" Class="text-center">
                <MSelect @bind-Value="_selectAppServiceType"
                         Disabled
                         Items="Enum<ServiceTypes>.GetEnumObjectList()"
                         ItemText="r=>r.Name"
                         ItemValue="r=>r.Value"
                         Outlined
                         Label="@T("Service type")">
                </MSelect>
            </Element>
        </FadeTransition>
        <MTextField Disabled Outlined Label="Url" @bind-Value="_appDetail.Url"></MTextField>
        <FadeTransition>
            <Element Show="@(_selectAppType == (int)AppTypes.Service)" Class="text-center">
                <MTextField Disabled Outlined Label="Swagger Url" @bind-Value="_appDetail.SwaggerUrl"></MTextField>
            </Element>
        </FadeTransition>
        <MTextField Disabled Outlined Label="ID" Placeholder="@T("If dapr is selected, the app identity format is recommended: app-id,divided by -")" @bind-Value="_appDetail.Identity"></MTextField>
        <MTextarea Disabled Outlined Label="@T("Cluster description")" @bind-Value="_appDetail.Description"></MTextarea>
    </ChildContent>
    <ActionsContent>
        <div style="width:100%; margin:10px;">
            <MButton OnClick="SubmitRelationAppAsync" Width=100 Class="rounded-pill" Color="primary" Style="float:right;">@T("Submit")</MButton>
        </div>
    </ActionsContent>
</FormModal>

@code {
    private string _friends = "Sandra Adams";
    private string _name = "Midnight Crew";

    public class Person
    {
        public string Header { get; set; }

        public string Name { get; set; }

        public string Group { get; set; }

        public string Avatar { get; set; }

        public bool Divider { get; set; }
    }

    private List<Person> _people = new List<Person>
    {
        new Person
        {
            Header="Group 1",
            Name="Group 1"
        },
        new Person
        {
            Name="Sandra Adams",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/1.png"
        },
        new Person
        {
            Name="Ali Connors",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/2.png"
        },
        new Person
        {
            Name="Trevor Hansen",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/3.png"
        },
        new Person
        {
            Name="Tucker Smith",
            Group="Group 1",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/2.png"
        },
        new Person
        {
            Divider=true,
            Name="Group 1"
        },
        new Person
        {
            Header="Group 2",
            Name="Group 1"
        },
        new Person
        {
            Name="Britta Holt",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/4.png"
        },
        new Person
        {
            Name="Jane Smith ",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/5.png"
        },
        new Person
        {
            Name="John Smith",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/1.png"
        },
        new Person
        {
            Name="Sandra Williams",
            Group="Group 2",
            Avatar="https://cdn.masastack.com/stack/images/website/masa-blazor/lists/3.png"
        }
    };
    private string _title = "The summer breeze";

    public void Remove()
    {
        _friends = "";
    }
}
